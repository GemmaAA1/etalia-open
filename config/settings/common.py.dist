# -*- coding: utf-8 -*-

"""
Django settings for etalia project.

Generated by 'django-admin startproject' using Django 1.8.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from __future__ import absolute_import, unicode_literals
import environ
from . import get_version

ROOT_DIR = environ.Path(__file__) - 3  # (/a/b/myfile.py - 3 = /)
APPS_DIR = ROOT_DIR.path('etalia')

env = environ.Env()

SITE_ID = 1

# Get app version from root __init__
VERSION = get_version(str(ROOT_DIR.path()))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DJANGO_DEBUG', default=False)
SECRET_KEY = env('DJANGO_SECRET_KEY', default='CHANGEME!!!')
ALLOWED_HOSTS = ['localhost', '127.0.0.1', 'localhost']



# APP CONFIGURATION
# ------------------------------------------------------------------------------
DJANGO_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
)


THIRD_PARTY_APPS = (
    'social.apps.django_app.default',
    'disqus',
    'endless_pagination',
    'avatar',
    'messages_extends',
)

LOCAL_APPS = (
    'etalia.core',
    'etalia.library',
    'etalia.populate',
    'etalia.consumers',
    'etalia.nlp',
    'etalia.users',
    'etalia.feeds',
    'etalia.altmetric',
    'etalia.invite',
    'etalia.last_seen'
    # 'functional_tests',
)

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# MIDDLEWARE CONFIGURATION
# ------------------------------------------------------------------------------
MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'etalia.last_seen.middleware.LastSeenMiddleware',
)


# DATABASE CONFIGURATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'etalia',
        'USER': 'nicolaspannetier',
        'PASSWORD': '',
        'HOST': 'localhost',
        'PORT': '',
        'ATOMIC_REQUESTS': True,
    }
}

# TEMPLATE CONFIGURATION
# ------------------------------------------------------------------------------

TEMPLATE_CONTEXT_PROCESSORS = (
    'django.contrib.auth.context_processors.auth',
    'django.core.context_processors.debug',
    'django.core.context_processors.i18n',
    'django.core.context_processors.media',
    'django.core.context_processors.static',
    'django.core.context_processors.tz',
    'django.contrib.messages.context_processors.messages',
    'django.core.context_processors.request',
    # Your stuff: custom template context processors go here
    'social.apps.django_app.context_processors.backends',
    'django.core.context_processors.request',
    'etalia.core.context_processors.admin_context',
)

# See: https://docs.djangoproject.com/en/dev/ref/settings/#template-dirs
TEMPLATE_DIRS = (
    str(APPS_DIR.path('templates')),
)

TEMPLATE_LOADERS = (
    'django.template.loaders.filesystem.Loader',
    'django.template.loaders.app_directories.Loader',
)

LIBRARY_ITEMS_PER_PAGE = 100
NUMBER_OF_NEIGHBORS = 5

# GENERAL CONFIGURATION
# ------------------------------------------------------------------------------
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# STATIC FILE CONFIGURATION
#  https://docs.djangoproject.com/en/1.8/howto/static-files/
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-root
# use to serve static file in production by collecting static files in root
STATIC_ROOT = str(ROOT_DIR.path('staticfiles'))

# See: https://docs.djangoproject.com/en/dev/ref/settings/#static-url
STATIC_URL = '/static/'

# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:setting-STATICFILES_DIRS
STATICFILES_DIRS = (
    str(APPS_DIR.path('static')),
)

# See: https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#staticfiles-finders
STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
)


# MEDIA CONFIGURATION
# ------------------------------------------------------------------------------
# See: https://docs.djangoproject.com/en/dev/ref/settings/#media-root
MEDIA_ROOT = str(APPS_DIR.path('media'))

# See: https://docs.djangoproject.com/en/dev/ref/settings/#media-url
MEDIA_URL = '/media/'


# URL Configuration
# ------------------------------------------------------------------------------
ROOT_URLCONF = 'config.urls'

# See: https://docs.djangoproject.com/en/dev/ref/settings/#wsgi-application
WSGI_APPLICATION = 'config.wsgi.application'


# EMAIL TEMPLATES
# ------------------------------------------------------------------------------
EMAIL_STATIC_BUCKET = 'https://s3-us-west-2.amazonaws.com/etalia-email-static/'
INVITE_EMAIL_TEMPLATE = 'emails/alpha_invite_template_email_process.html'

# AUTHENTICATION CONFIGURATION
# ------------------------------------------------------------------------------
AUTHENTICATION_BACKENDS = (
    'etalia.users.backends.mendeley.CustomMendeleyOAuth2',
    'etalia.users.backends.zotero.CustomZoteroOAuth',
    'social.backends.email.EmailAuth',
    'django.contrib.auth.backends.ModelBackend',
    # 'allauth.account.auth_backends.AuthenticationBackend',
)

AUTH_USER_MODEL = 'users.User'

# LOGIN_URL = '/login/'
LOGIN_URL = '/'
LOGIN_REDIRECT_URL = '/'
URL_PATH = ''
SOCIAL_AUTH_STRATEGY = 'social.strategies.django_strategy.DjangoStrategy'
SOCIAL_AUTH_STORAGE = 'social.apps.django_app.default.models.DjangoStorage'
SOCIAL_AUTH_GOOGLE_OAUTH_SCOPE = [
    'https://www.googleapis.com/auth/drive',
    'https://www.googleapis.com/auth/userinfo.profile'
]
# SOCIAL_AUTH_EMAIL_FORM_URL = '/signup-email'
SOCIAL_AUTH_EMAIL_FORM_HTML = 'email_signup.html'
SOCIAL_AUTH_EMAIL_VALIDATION_FUNCTION = 'etalia.users.mail.send_validation'
SOCIAL_AUTH_EMAIL_VALIDATION_URL = 'user:validation-sent'
# SOCIAL_AUTH_USERNAME_FORM_URL = '/signup-username'
SOCIAL_AUTH_USERNAME_FORM_HTML = 'username_signup.html'
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True

EMAIL_FROM = 'noreply@etalia.io'

SOCIAL_AUTH_PIPELINE = (
    'social.pipeline.social_auth.social_details',
    'social.pipeline.social_auth.social_uid',
    'social.pipeline.social_auth.auth_allowed',
    'social.pipeline.social_auth.social_user',
    'social.pipeline.user.get_username',
    'etalia.users.pipeline.require_primary',
    # 'social.pipeline.mail.mail_validation',
    'social.pipeline.user.create_user',
    'social.pipeline.social_auth.associate_user',
    'social.pipeline.social_auth.load_extra_data',
    'social.pipeline.user.user_details',
    'social.pipeline.debug.debug',
    'etalia.users.pipeline.create_details',
    'etalia.users.pipeline.init_messages',
    'etalia.users.pipeline.init_user',

    # 'etalia.users.pipeline.require_affiliation',
)

# Mendeley Keys
SOCIAL_AUTH_MENDELEY_KEY = \
    env('SOCIAL_AUTH_MENDELEY_KEY')
SOCIAL_AUTH_MENDELEY_SECRET = \
    env('SOCIAL_AUTH_MENDELEY_SECRET')

# Zotero Keys
SOCIAL_AUTH_ZOTERO_KEY = env('SOCIAL_AUTH_ZOTERO_KEY')
SOCIAL_AUTH_ZOTERO_SECRET = env('SOCIAL_AUTH_ZOTERO_SECRET')

SOCIAL_AUTH_ZOTERO_AUTH_EXTRA_ARGUMENTS = {'write_access': '1'}

# LAST SEEN
# ------------------------------------------------------------------------------
LAST_SEEN_DEFAULT_MODULE = 'default'
LAST_SEEN_INTERVAL = 2 * 60 * 60


# DISQUS
# ------------------------------------------------------------------------------
DISQUS_WEBSITE_SHORTNAME = env('DISQUS_WEBSITE_SHORTNAME')
DISQUS_PUBLIC_KEY = env('DISQUS_PUBLIC_KEY')
DISQUS_SECRET_KEY = env('DISQUS_SECRET_KEY')


# AWS S3
# ------------------------------------------------------------------------------
DJANGO_AWS_ACCESS_KEY_ID = env('DJANGO_AWS_ACCESS_KEY_ID')
DJANGO_AWS_SECRET_ACCESS_KEY = env('DJANGO_AWS_SECRET_ACCESS_KEY')
AWS_ACCESS_KEY_ID = DJANGO_AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = DJANGO_AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME = env('DJANGO_AWS_STORAGE_BUCKET_NAME')
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto.S3BotoStorage'

# CONSUMER CONFIGURATION
# ------------------------------------------------------------------------------

# Minimum delay between same journal is consumed twice (in period of scheduler.
# ie if period is a day, then unit is in days)
CONS_MIN_DELAY = 0
CONS_MAX_DELAY = 7

# In days, how many day in the past to look at when initializing database
CONS_INIT_PAST = 365

CONSUMER_PUBMED_EMAIL = env('CONSUMER_PUBMED_EMAIL')
CONSUMER_ELSEVIER_API_KEY = env('CONSUMER_ELSEVIER_API_KEY')


# NLP APP
# ------------------------------------------------------------------------------
NLP_CHUNK_SIZE = 10000
NLP_DATA_PATH = str((ROOT_DIR-1).path('nlp_data', 'data'))
NLP_MODELS_PATH = str((ROOT_DIR-1).path('nlp_data', 'mods'))
NLP_MS_PATH = str((ROOT_DIR-1).path('nlp_data', 'ms'))
NLP_NLTK_DATA_PATH = str((ROOT_DIR-1).path('nlp', 'nltk_data'))
NLP_MAX_VECTOR_SIZE = 300
NLP_MAX_KNN_NEIGHBORS = 10

# Time in days for recomputing neighbors is accessed
NLP_NEIGHBORS_REFRESH_TIME_LAPSE = 7

# FEED APP
# ------------------------------------------------------------------------------
FEED_SIZE_PER_DAY = 5

FEEDS_SCORE_KEEP_N_PAPERS = 200
FEEDS_DISPLAY_N_PAPERS = 50
# Number of papers to rank
FEED_MAX_TARGETS = 200000

# Number of Clusters
FEED_NB_CLUSTERS = 5

HIDE_CLUSTER_ICON = True

# ALTMETRIC APP
# ------------------------------------------------------------------------------
ALTMETRIC_API_KEY = env('ALTMETRIC_API_KEY')
# slightly less than each second in a a day
ALTMETRIC_MAX_PAPERS_PER_PERIOD = 20 * 3600


# LANDING
# ------------------------------------------------------------------------------
LANDING_ACTIVE_PAPERS_NUMBER = 1
LANDING_ACTIVE_PAPERS_TIME_IN_DAYS = 30

# AVATAR
# ------------------------------------------------------------------------------
from PIL import Image
AVATAR_DEFAULT_SIZE = 80
AVATAR_RESIZE_METHOD = Image.ANTIALIAS
AVATAR_GRAVATAR_BACKUP = False
AVATAR_GRAVATAR_DEFAULT = None
AVATAR_GRAVATAR_BASE_URL = 'https://www.gravatar.com/avatar/'
AVATAR_CACHE_TIMEOUT = 10
AVATAR_DEFAULT_URL = 'img/avatar.png'
AVATAR_MAX_AVATARS_PER_USER = 1
AVATAR_ALLOWED_FILE_EXTS = ('.png', '.jpg')
AVATAR_MAX_SIZE = 1024 * 1024
AVATAR_STORAGE_DIR = 'photos'
AVATAR_HASH_FILENAMES = False
AVATAR_HASH_USERDIRNAMES = False
AVATAR_THUMB_FORMAT = 'JPEG'
AVATAR_THUMB_QUALITY = 85
AVATAR_STORAGE = DEFAULT_FILE_STORAGE
AVATAR_CLEANUP_DELETED = False
AVATAR_AUTO_GENERATE_SIZES = (AVATAR_DEFAULT_SIZE, 120)
AVATAR_DEFAULT_MENDELEY = 'http://s3.amazonaws.com/mendeley-photos/awaiting.png'

# LOGGING CONFIGURATION
# ------------------------------------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s.%(msecs)03d] %(levelname)s (%(name)s:%(funcName)s) %(message)s",
            'datefmt': "%Y-%m-%d %H:%M:%S",
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(message)s'
        },
    },
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'etalia.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'populate': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'populate.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'nlp': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'nlp.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'feeds': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'feeds.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'users': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'users.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'consumers': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'consumers.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'celery': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': str((ROOT_DIR-1).path('log', 'celery.log')),
            'formatter': 'verbose',
            'maxBytes': 1024 * 1024 * 5,  # 5 mb
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': 'INFO',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'etalia': {
            'handlers': ['console', 'file'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
        },
        'etalia.populate': {
            'handlers': ['console', 'populate'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'etalia.consumers': {
            'handlers': ['console', 'consumers', 'mail_admins'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'etalia.nlp': {
            'handlers': ['console', 'nlp', 'mail_admins'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'etalia.feeds': {
            'handlers': ['console', 'feeds', 'mail_admins'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'etalia.users': {
            'handlers': ['console', 'users', 'mail_admins'],
            'level': env.str('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
    }
}

# MESSAGES
MESSAGE_STORAGE = 'messages_extends.storages.FallbackStorage'

