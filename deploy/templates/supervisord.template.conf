[unix_http_server]
file=/tmp/supervisor.sock                       ; path to your socket file

[supervisord]
logfile={{ STACK_DIR }}/log/supervisord.log     ; supervisord log file
logfile_maxbytes=10MB                           ; maximum size of logfile before rotation
logfile_backups=5                               ; number of backed up logfiles
loglevel=info                                   ; info, debug, warn, trace
pidfile=/tmp/supervisord.pid                    ; pidfile location
nodaemon=false                                  ; run supervisord as a daemon
minfds=1024                                     ; number of startup file descriptors
minprocs=200                                    ; number of process descriptors
user={{ USER }}                                 ; default user
childlogdir={{ STACK_DIR }}/log/                ; where child log files will live
environment=ENV_VARS_POSTACTIVATE

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

[program:update-tags-and-ips]
command={{ ENV_DIR }}/bin/python deploy/update_tags_and_ips.py
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=false
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=999


{% if 'web' in ROLES %}
[program:gunicorn]
command={{ ENV_DIR }}/bin/gunicorn config.wsgi:application -c {{ STACK_DIR }}/{{ CONF_DIR }}/gunicorn.conf.py
directory={{ SOURCE_DIR }}
user={{ USER }}
autostart=true
autorestart=true
redirect_stderr=true
priority=998
{% endif %}

{% if 'base' in ROLES %}
[program:celery-default]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q default --autoscale=10,3 -l DEBUG -n default@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:celery-consumers]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q consumers --concurrency=4 -l INFO -n consumers@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

{% endif %}

{% if 'nlp' in ROLES %}
[program:celery-nlp]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q nlp,library --concurrency=1 -l INFO -n nlp@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'pe' in ROLES %}
[program:celery-pe]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q pe --concurrency=2 -l INFO -n pe@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'te' in ROLES %}
[program:celery-te]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q te --concurrency=2 -l INFO -n te@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'pe' in ROLES %}
[program:celery-update_engines]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q update_engines --concurrency=1 -l INFO -n update_engines@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'feed' in ROLES %}
[program:celery-feeds]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q feed --concurrency=1 -l INFO -n feed@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if SPOT %}
[program:monitor-spot-termination]
command={{ ENV_DIR }}/bin/python deploy/monitor_spot_termination.py
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=999
{% endif %}

{% if 'redis' in ROLES %}
[program:redis]
command=/usr/bin/redis-server {{ STACK_DIR}}/redis/redis.conf
user={{ USER }}
directory={{ STACK_DIR}}/redis
autostart=true
autorestart=true
stdout_logfile={{ STACK_DIR }}/log/%(program_name)s.log
stderr_logfile={{ STACK_DIR }}/log/%(program_name)s_err.log
{% endif %}

{% if 'master' in ROLES %}
[program:celery-altmetric]
command={{ ENV_DIR }}/bin/celery worker -A config --config config.celery_settings.{{ STACK }}.base -Q altmetric --concurrency=1 -l INFO -n altmetric@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:celery-scheduler-beat]
command={{ ENV_DIR }}/bin/celery -A config beat --config config.celery_settings.{{ STACK }}.beat -s {{ STACK_DIR }}/{{ CONF_DIR }}/schedule-beat.db -l INFO
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:celery-worker-beat]
command={{ ENV_DIR }}/bin/celery -A config --config config.celery_settings.{{ STACK }}.beat -Q beat --concurrency=1 -l INFO -n beat@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:flower]
command={{ ENV_DIR }}/bin/celery flower -A config --config config.celery_settings.{{ STACK }}.base  --basic_auth={{ USERS_PASSWORDS_FLOWER }}
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=999
{% endif %}