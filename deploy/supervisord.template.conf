[unix_http_server]
file=/tmp/supervisor.sock                       ; path to your socket file

[supervisord]
logfile={{ STACK_DIR }}/log/supervisord.log     ; supervisord log file
logfile_maxbytes=10MB                           ; maximum size of logfile before rotation
logfile_backups=5                               ; number of backed up logfiles
loglevel=info                                   ; info, debug, warn, trace
pidfile=/tmp/supervisord.pid                    ; pidfile location
nodaemon=false                                  ; run supervisord as a daemon
minfds=1024                                     ; number of startup file descriptors
minprocs=200                                    ; number of process descriptors
user={{ USER }}                                 ; default user
childlogdir={{ STACK_DIR }}/log/                ; where child log files will live
environment=ENV_VARS_POSTACTIVATE

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock

{% if 'apps' in ROLES %}
[program:gunicorn]
command={{ ENV_DIR }}/bin/gunicorn config.wsgi:application -c {{ STACK_DIR }}/{{ CONF_DIR }}/gunicorn.conf.py
directory={{ SOURCE_DIR }}
user={{ USER }}
autostart=true
autorestart=true
redirect_stderr=true
priority=998
{% endif %}


{% if 'jobs' in ROLES %}
{% if 'base' in ROLES or 'spot' in ROLES %}
[program:celery-default]
command={{ ENV_DIR }}/bin/celery worker -A config -Q default --concurrency=4 -l INFO -n worker1-default-{{ STACK }}@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
autorestart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:celery-consumers]
command={{ ENV_DIR }}/bin/celery worker -A config -Q consumers --concurrency=4 -l INFO -n worker1-consumers-{{ STACK }}@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
autorestart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'nlp' in ROLES or 'spot' in ROLES %}
[program:celery-nlp]
command={{ ENV_DIR }}/bin/celery worker -A config -Q nlp --concurrency=2 -l INFO -n worker1-nlp-{{ STACK }}@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
autorestart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if 'lsh' in ROLES or 'spot' in ROLES %}
[program:celery-mostsimilar]
command={{ ENV_DIR }}/bin/celery worker -A config -Q mostsimilar --concurrency=2 -l INFO -n worker1-ms-{{ STACK }}@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
autorestart={% if 'spot' in ROLES %} false {% else %} true {% endif %}
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first
{% endif %}

{% if JOB_MASTER %}
[program:celery-altmetric]
command={{ ENV_DIR }}/bin/celery worker -A config -Q altmetric --concurrency=1 -l INFO -n worker1-altmetric-{{ STACK }}@%%h
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:celery-beat]
command={{ ENV_DIR }}/bin/celery -A config beat -s {{ STACK_DIR }}/{{ CONF_DIR }}/schedule-beat.db -l INFO
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=false
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=998  ; if rabbitmq is supervised, set its priority higher so it starts first

[program:flower]
command={{ ENV_DIR }}/bin/celery flower -A config --basic_auth={{ USERS_PASSWORDS_FLOWER }}
directory={{ SOURCE_DIR }}
user={{ USER }}
numprocs=1
autostart=true
autorestart=true
startsecs=10
stopwaitsecs = 600
killasgroup=true
priority=999
{% endif %}


;[group:celery]
;programs=celery-default,celery-nlp,celery-consumers,celery-beat
;priority=998
{% endif %}